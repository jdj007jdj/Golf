name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  # Backend testing and build
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:16-3.5-alpine
        env:
          POSTGRES_DB: golfdb_test
          POSTGRES_USER: golfuser
          POSTGRES_PASSWORD: golfpass123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Generate Prisma client
      working-directory: ./backend
      run: npm run db:generate
      env:
        DATABASE_URL: postgresql://golfuser:golfpass123@localhost:5432/golfdb_test

    - name: Run database migrations
      working-directory: ./backend
      run: npm run migrate:dev
      env:
        DATABASE_URL: postgresql://golfuser:golfpass123@localhost:5432/golfdb_test

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint

    - name: Run backend type checking
      working-directory: ./backend
      run: npm run typecheck

    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://golfuser:golfpass123@localhost:5432/golfdb_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-refresh-secret

    - name: Build backend
      working-directory: ./backend
      run: npm run build

  # Frontend testing and build
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend type checking
      working-directory: ./frontend
      run: npm run typecheck

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  # Mobile app testing and build (Android)
  mobile-android:
    name: Mobile Android CI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install mobile dependencies
      working-directory: ./mobile
      run: npm ci

    - name: Run mobile linting
      working-directory: ./mobile
      run: npm run lint

    - name: Run mobile type checking
      working-directory: ./mobile
      run: npm run typecheck

    - name: Run mobile tests
      working-directory: ./mobile
      run: npm test

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: Build Android APK
      working-directory: ./mobile
      run: |
        cd android
        ./gradlew assembleDebug

  # Mobile app testing (iOS) - only on macOS
  mobile-ios:
    name: Mobile iOS CI
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json

    - name: Install mobile dependencies
      working-directory: ./mobile
      run: npm ci

    - name: Install CocoaPods dependencies
      working-directory: ./mobile/ios
      run: pod install

    - name: Build iOS app
      working-directory: ./mobile
      run: npx react-native build-ios --mode Debug

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Run npm audit (Backend)
      working-directory: ./backend
      run: npm audit --audit-level=moderate

    - name: Run npm audit (Frontend)
      working-directory: ./frontend
      run: npm audit --audit-level=moderate

    - name: Run npm audit (Mobile)
      working-directory: ./mobile
      run: npm audit --audit-level=moderate

  # Docker build and push (only on main branch)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./docker/Dockerfile.backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/golf-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/golf-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./docker/Dockerfile.frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/golf-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/golf-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max