import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { useDispatch } from 'react-redux';
import { setCourses } from '@/store/slices/courseSlice';
import { dataService } from '@/services/data/dataService';
import { Course } from '@/types';

interface HoleData {
  number: number;
  par: number;
  name: string;
}

const CreateCourseScreen: React.FC = () => {
  const navigation = useNavigation();
  const dispatch = useDispatch();
  const [courseName, setCourseName] = useState('');
  const [location, setLocation] = useState('');
  const [holes, setHoles] = useState<HoleData[]>([
    ...Array.from({ length: 18 }, (_, i) => ({
      number: i + 1,
      par: 4,
      name: `Hole ${i + 1}`,
    })),
  ]);
  const [isLoading, setIsLoading] = useState(false);

  const updateHolePar = (holeIndex: number, par: number) => {
    const updatedHoles = [...holes];
    updatedHoles[holeIndex].par = par;
    setHoles(updatedHoles);
  };

  const updateHoleName = (holeIndex: number, name: string) => {
    const updatedHoles = [...holes];
    updatedHoles[holeIndex].name = name;
    setHoles(updatedHoles);
  };

  const addHole = () => {
    if (holes.length < 18) {
      setHoles([
        ...holes,
        {
          number: holes.length + 1,
          par: 4,
          name: `Hole ${holes.length + 1}`,
        },
      ]);
    }
  };

  const removeHole = (holeIndex: number) => {
    if (holes.length > 1) {
      const updatedHoles = holes.filter((_, index) => index !== holeIndex);
      // Renumber the holes
      const renumberedHoles = updatedHoles.map((hole, index) => ({
        ...hole,
        number: index + 1,
        name: hole.name.includes('Hole ') ? `Hole ${index + 1}` : hole.name,
      }));
      setHoles(renumberedHoles);
    }
  };

  const validateForm = () => {
    if (!courseName.trim()) {
      Alert.alert('Error', 'Course name is required');
      return false;
    }
    if (holes.length === 0) {
      Alert.alert('Error', 'At least one hole is required');
      return false;
    }
    return true;
  };

  const handleSave = async () => {
    if (!validateForm()) return;

    setIsLoading(true);
    try {
      const courseData: Course = {
        id: '', // Will be generated by dataService
        name: courseName.trim(),
        location: location.trim() || undefined,
        holes: holes.map(hole => ({
          id: '', // Will be generated
          courseId: '', // Will be set by dataService
          number: hole.number,
          par: hole.par,
          name: hole.name,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        })),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      const savedCourse = await dataService.saveCourse(courseData);
      
      Alert.alert('Success', 'Course created successfully', [
        {
          text: 'OK',
          onPress: () => {
            // Refresh courses list
            loadCourses();
            navigation.goBack();
          },
        },
      ]);
    } catch (error) {
      Alert.alert('Error', 'Failed to create course. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const loadCourses = async () => {
    try {
      const courses = await dataService.getCourses();
      dispatch(setCourses(courses));
    } catch (error) {
      // Silent fail - user will see updated list when they navigate back
    }
  };

  const renderParButton = (par: number, selectedPar: number, onPress: () => void) => (
    <TouchableOpacity
      style={[
        styles.parButton,
        selectedPar === par && styles.parButtonSelected,
      ]}
      onPress={onPress}
    >
      <Text
        style={[
          styles.parButtonText,
          selectedPar === par && styles.parButtonTextSelected,
        ]}
      >
        {par}
      </Text>
    </TouchableOpacity>
  );

  const renderHole = (hole: HoleData, index: number) => (
    <View key={index} style={styles.holeContainer}>
      <View style={styles.holeHeader}>
        <Text style={styles.holeNumber}>Hole {hole.number}</Text>
        {holes.length > 1 && (
          <TouchableOpacity
            style={styles.removeButton}
            onPress={() => removeHole(index)}
          >
            <Text style={styles.removeButtonText}>Remove</Text>
          </TouchableOpacity>
        )}
      </View>

      <View style={styles.holeContent}>
        <View style={styles.inputGroup}>
          <Text style={styles.label}>Hole Name</Text>
          <TextInput
            style={styles.textInput}
            value={hole.name}
            onChangeText={(text) => updateHoleName(index, text)}
            placeholder="Enter hole name"
          />
        </View>

        <View style={styles.inputGroup}>
          <Text style={styles.label}>Par</Text>
          <View style={styles.parButtonGroup}>
            {[3, 4, 5, 6].map((par) =>
              renderParButton(par, hole.par, () => updateHolePar(index, par))
            )}
          </View>
        </View>
      </View>
    </View>
  );

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <View style={styles.content}>
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Course Details</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.label}>Course Name *</Text>
              <TextInput
                style={styles.textInput}
                value={courseName}
                onChangeText={setCourseName}
                placeholder="Enter course name"
                autoCapitalize="words"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.label}>Location</Text>
              <TextInput
                style={styles.textInput}
                value={location}
                onChangeText={setLocation}
                placeholder="Enter course location"
                autoCapitalize="words"
              />
            </View>
          </View>

          <View style={styles.section}>
            <View style={styles.holesHeader}>
              <Text style={styles.sectionTitle}>Holes ({holes.length})</Text>
              {holes.length < 18 && (
                <TouchableOpacity style={styles.addHoleButton} onPress={addHole}>
                  <Text style={styles.addHoleButtonText}>+ Add Hole</Text>
                </TouchableOpacity>
              )}
            </View>

            {holes.map((hole, index) => renderHole(hole, index))}
          </View>
        </View>
      </ScrollView>

      <View style={styles.footer}>
        <TouchableOpacity
          style={[styles.button, styles.cancelButton]}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.cancelButtonText}>Cancel</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.button, styles.saveButton, isLoading && styles.disabledButton]}
          onPress={handleSave}
          disabled={isLoading}
        >
          <Text style={styles.saveButtonText}>
            {isLoading ? 'Creating...' : 'Create Course'}
          </Text>
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    flex: 1,
  },
  content: {
    padding: 16,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#2c5234',
    marginBottom: 16,
  },
  inputGroup: {
    marginBottom: 16,
  },
  label: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
    marginBottom: 8,
  },
  textInput: {
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: '#333',
  },
  holesHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  addHoleButton: {
    backgroundColor: '#4caf50',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  addHoleButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '500',
  },
  holeContainer: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  holeHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  holeNumber: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2c5234',
  },
  removeButton: {
    backgroundColor: '#f44336',
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 4,
  },
  removeButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '500',
  },
  holeContent: {
    gap: 12,
  },
  parButtonGroup: {
    flexDirection: 'row',
    gap: 8,
  },
  parButton: {
    backgroundColor: '#f0f0f0',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 8,
    minWidth: 40,
    alignItems: 'center',
  },
  parButtonSelected: {
    backgroundColor: '#4caf50',
    borderColor: '#4caf50',
  },
  parButtonText: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
  },
  parButtonTextSelected: {
    color: '#fff',
  },
  footer: {
    flexDirection: 'row',
    padding: 16,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
    gap: 12,
  },
  button: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  cancelButton: {
    backgroundColor: '#f5f5f5',
    borderWidth: 1,
    borderColor: '#ddd',
  },
  cancelButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#666',
  },
  saveButton: {
    backgroundColor: '#4caf50',
  },
  saveButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#fff',
  },
  disabledButton: {
    backgroundColor: '#ccc',
  },
});

export default CreateCourseScreen;